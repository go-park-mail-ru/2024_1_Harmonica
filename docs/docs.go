// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/is_auth": {
            "get": {
                "description": "Get user by request cookie",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authorization"
                ],
                "summary": "Get auth status",
                "parameters": [
                    {
                        "type": "string",
                        "default": "session-token=",
                        "description": "session-token",
                        "name": "Cookie",
                        "in": "header"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entity.UserResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/entity.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entity.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entity.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/login": {
            "post": {
                "description": "Login user by request.body json",
                "tags": [
                    "Authorization"
                ],
                "summary": "Login user",
                "parameters": [
                    {
                        "type": "string",
                        "default": "session-token=",
                        "description": "session-token",
                        "name": "Cookie",
                        "in": "header"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object"
                        },
                        "headers": {
                            "Set-Cookie": {
                                "type": "string",
                                "description": "session-token"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/entity.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entity.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/entity.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entity.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/logout": {
            "get": {
                "description": "Logout user by their session cookie",
                "tags": [
                    "Authorization"
                ],
                "summary": "Logout user",
                "parameters": [
                    {
                        "type": "string",
                        "default": "session-token=",
                        "description": "session-token",
                        "name": "Cookie",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object"
                        },
                        "headers": {
                            "Set-Cookie": {
                                "type": "string",
                                "description": "session-token"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/entity.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/pins_list": {
            "get": {
                "description": "Get pins by page",
                "tags": [
                    "Pins"
                ],
                "summary": "Pins list",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Page num from 0",
                        "name": "page",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entity.Pins"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/entity.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/register": {
            "post": {
                "description": "Register user by POST request and add them to DB",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authorization"
                ],
                "summary": "Register user",
                "parameters": [
                    {
                        "description": "json",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/repository.User"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entity.UserResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/entity.ErrorsListResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/entity.ErrorsListResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entity.ErrorsListResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "repository.User": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "nickname": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "entity.ErrorResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "entity.ErrorsListResponse": {
            "type": "object",
            "properties": {
                "errors": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/entity.ErrorResponse"
                    }
                }
            }
        },
        "entity.Pin": {
            "description": "Pin information with author, pin id, created date, caption, click and content URLs.",
            "type": "object",
            "properties": {
                "author": {
                    "$ref": "#/definitions/entity.PinAuthor"
                },
                "caption": {
                    "type": "string"
                },
                "click_url": {
                    "type": "string"
                },
                "content_url": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "pin_id": {
                    "type": "integer"
                }
            }
        },
        "entity.PinAuthor": {
            "description": "User-author information with user id and nickname",
            "type": "object",
            "properties": {
                "nickname": {
                    "type": "string"
                },
                "user_id": {
                    "type": "integer"
                }
            }
        },
        "entity.Pins": {
            "description": "Pins array of Pin",
            "type": "object",
            "properties": {
                "pins": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/entity.Pin"
                    }
                }
            }
        },
        "entity.UserResponse": {
            "description": "User information with user id, email and nickname",
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "nickname": {
                    "type": "string"
                },
                "user_id": {
                    "type": "integer"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "http://89.111.174.111:8080/",
	BasePath:         "api/v1",
	Schemes:          []string{},
	Title:            "Harmonium backend API",
	Description:      "This is API-docs of backend server of Harmonica team.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
