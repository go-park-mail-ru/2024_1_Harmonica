basePath: api/v1
definitions:
  entity.Board:
    properties:
      board_id:
        type: integer
      created_at:
        type: string
      description:
        type: string
      is_owner:
        type: boolean
      title:
        type: string
      visibility_type:
        $ref: '#/definitions/entity.VisibilityType'
    type: object
  entity.BoardAuthor:
    properties:
      avatar_url:
        type: string
      nickname:
        type: string
      user_id:
        type: integer
    type: object
  entity.BoardPinResponse:
    properties:
      author:
        $ref: '#/definitions/entity.PinAuthor'
      content_url:
        type: string
      pin_id:
        type: integer
    type: object
  entity.FeedPinResponse:
    description: PinResponse information with author, pin id and content URL.
    properties:
      author:
        $ref: '#/definitions/entity.PinAuthor'
      content_url:
        type: string
      pin_id:
        type: integer
    type: object
  entity.FeedPins:
    description: Pins array of FeedPinResponse
    properties:
      pins:
        items:
          $ref: '#/definitions/entity.FeedPinResponse'
        type: array
    type: object
  entity.FullBoard:
    properties:
      authors:
        items:
          $ref: '#/definitions/entity.BoardAuthor'
        type: array
      board:
        $ref: '#/definitions/entity.Board'
      pins:
        items:
          $ref: '#/definitions/entity.BoardPinResponse'
        type: array
    type: object
  entity.Pin:
    description: Full pin information
    properties:
      allow_comments:
        type: boolean
      click_url:
        type: string
      description:
        type: string
      title:
        type: string
    type: object
  entity.PinAuthor:
    description: User-author information with user id, nickname and avatar
    properties:
      avatar_url:
        type: string
      nickname:
        type: string
      user_id:
        type: integer
    type: object
  entity.PinPageResponse:
    description: Full pin information
    properties:
      allow_comments:
        type: boolean
      author:
        $ref: '#/definitions/entity.PinAuthor'
      click_url:
        type: string
      content_url:
        type: string
      created_at:
        type: string
      description:
        type: string
      is_owner:
        type: boolean
      likes_count:
        type: integer
      pin_id:
        type: integer
      title:
        type: string
    type: object
  entity.User:
    properties:
      email:
        type: string
      nickname:
        type: string
      password:
        type: string
    type: object
  entity.UserBoards:
    properties:
      boards:
        items:
          $ref: '#/definitions/entity.Board'
        type: array
    type: object
  entity.UserList:
    description: User information with user id, email, nickname and avatar_url
    properties:
      users:
        items:
          $ref: '#/definitions/entity.UserResponse'
        type: array
    type: object
  entity.UserProfileResponse:
    properties:
      followers_count:
        type: integer
      is_owner:
        type: boolean
      user:
        $ref: '#/definitions/entity.UserResponse'
    type: object
  entity.UserResponse:
    description: User information with user id, email, nickname and avatar_url
    properties:
      avatar_url:
        type: string
      email:
        type: string
      nickname:
        type: string
      user_id:
        type: integer
    type: object
  entity.VisibilityType:
    enum:
    - public
    - private
    type: string
    x-enum-varnames:
    - VisibilityPublic
    - VisibilityPrivate
  errs.ErrorResponse:
    properties:
      code:
        type: integer
      message:
        type: string
    type: object
host: https://harmoniums.ru
info:
  contact: {}
  description: This is API-docs of backend server of Harmonica team.
  title: Harmonium backend API
  version: "1.0"
paths:
  /boards:
    post:
      consumes:
      - application/json
      description: Create board by description
      parameters:
      - default: session-token=
        description: session-token
        in: header
        name: Cookie
        required: true
        type: string
      - description: Board information
        in: body
        name: board
        schema:
          $ref: '#/definitions/entity.Board'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.FullBoard'
        "400":
          description: 'Possible code responses: 3, 4, 5, 21.'
          schema:
            $ref: '#/definitions/errs.ErrorResponse'
        "401":
          description: 'Possible code responses: 2.'
          schema:
            $ref: '#/definitions/errs.ErrorResponse'
        "500":
          description: 'Possible code responses: 11.'
          schema:
            $ref: '#/definitions/errs.ErrorResponse'
      summary: Create board
      tags:
      - Boards
  /boards/{board_id}/:
    delete:
      description: Delete board by board id.
      parameters:
      - default: session-token=
        description: session-token
        in: header
        name: Cookie
        required: true
        type: string
      - description: Board ID
        in: path
        name: board_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: object
        "400":
          description: 'Possible code responses: 4, 12, 21.'
          schema:
            $ref: '#/definitions/errs.ErrorResponse'
        "401":
          description: 'Possible code responses: 2.'
          schema:
            $ref: '#/definitions/errs.ErrorResponse'
        "403":
          description: 'Possible code responses: 14.'
          schema:
            $ref: '#/definitions/errs.ErrorResponse'
        "500":
          description: 'Possible code responses: 11.'
          schema:
            $ref: '#/definitions/errs.ErrorResponse'
      summary: Delete board
      tags:
      - Boards
    get:
      consumes:
      - application/json
      description: Get board by id
      parameters:
      - default: session-token=
        description: session-token
        in: header
        name: Cookie
        required: true
        type: string
      - description: Board ID
        in: path
        name: board_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.FullBoard'
        "400":
          description: 'Possible code responses: 4, 12, 21.'
          schema:
            $ref: '#/definitions/errs.ErrorResponse'
        "401":
          description: 'Possible code responses: 2.'
          schema:
            $ref: '#/definitions/errs.ErrorResponse'
        "403":
          description: 'Possible code responses: 14.'
          schema:
            $ref: '#/definitions/errs.ErrorResponse'
        "500":
          description: 'Possible code responses: 11.'
          schema:
            $ref: '#/definitions/errs.ErrorResponse'
      summary: Get board
      tags:
      - Boards
    post:
      consumes:
      - multipart/form-data
      description: Update board by board information
      parameters:
      - default: session-token=
        description: session-token
        in: header
        name: Cookie
        required: true
        type: string
      - description: Board ID
        in: path
        name: board_id
        type: integer
      - description: Cover image
        in: formData
        name: image
        type: file
      - description: Board information in json
        in: formData
        name: board
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.FullBoard'
        "400":
          description: 'Possible code responses: 4, 12, 17, 18, 21.'
          schema:
            $ref: '#/definitions/errs.ErrorResponse'
        "401":
          description: 'Possible code responses: 2.'
          schema:
            $ref: '#/definitions/errs.ErrorResponse'
        "403":
          description: 'Possible code responses: 14.'
          schema:
            $ref: '#/definitions/errs.ErrorResponse'
        "500":
          description: 'Possible code responses: 11.'
          schema:
            $ref: '#/definitions/errs.ErrorResponse'
      summary: Update board
      tags:
      - Boards
  /boards/{board_id}/pins/{pin_id}/:
    post:
      consumes:
      - application/json
      description: Delete pin from board by pin id and board id.
      parameters:
      - default: session-token=
        description: session-token
        in: header
        name: Cookie
        required: true
        type: string
      - description: Board ID
        in: path
        name: board_id
        required: true
        type: integer
      - description: Board ID
        in: path
        name: pin_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: object
        "400":
          description: 'Possible code responses: 4, 12, 21.'
          schema:
            $ref: '#/definitions/errs.ErrorResponse'
        "401":
          description: 'Possible code responses: 2.'
          schema:
            $ref: '#/definitions/errs.ErrorResponse'
        "403":
          description: 'Possible code responses: 14.'
          schema:
            $ref: '#/definitions/errs.ErrorResponse'
        "500":
          description: 'Possible code responses: 11.'
          schema:
            $ref: '#/definitions/errs.ErrorResponse'
      summary: Delete pin from board
      tags:
      - Boards
  /boards/created/{nickname}/:
    get:
      description: Get boards created by user by user nickname.
      parameters:
      - default: session-token=
        description: session-token
        in: header
        name: Cookie
        required: true
        type: string
      - description: user nickname
        in: path
        name: nickname
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.UserBoards'
        "400":
          description: 'Possible code responses: 4, 12, 21.'
          schema:
            $ref: '#/definitions/errs.ErrorResponse'
        "401":
          description: 'Possible code responses: 2.'
          schema:
            $ref: '#/definitions/errs.ErrorResponse'
        "403":
          description: 'Possible code responses: 14.'
          schema:
            $ref: '#/definitions/errs.ErrorResponse'
        "500":
          description: 'Possible code responses: 11.'
          schema:
            $ref: '#/definitions/errs.ErrorResponse'
      summary: Get boards created by user
      tags:
      - Boards
  /is_auth:
    get:
      description: Get user by request cookie
      parameters:
      - default: session-token=
        description: session-token
        in: header
        name: Cookie
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.UserResponse'
        "400":
          description: 'Possible code responses: 3.'
          schema:
            $ref: '#/definitions/errs.ErrorResponse'
        "401":
          description: 'Possible code responses: 2.'
          schema:
            $ref: '#/definitions/errs.ErrorResponse'
        "500":
          description: 'Possible code responses: 11.'
          schema:
            $ref: '#/definitions/errs.ErrorResponse'
      summary: Get auth status
      tags:
      - Authorization
  /likes/{pin_id}/users:
    get:
      description: Get users that liked pin by pin ID
      parameters:
      - description: Pin ID
        in: path
        name: pin_id
        required: true
        type: integer
      - default: session-token=
        description: session-token
        in: header
        name: Cookie
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.UserList'
        "400":
          description: 'Possible code responses: 12.'
          schema:
            $ref: '#/definitions/errs.ErrorResponse'
        "500":
          description: 'Possible code responses: 11.'
          schema:
            $ref: '#/definitions/errs.ErrorResponse'
      summary: Get last 20 users that liked pin
      tags:
      - Likes
  /login:
    post:
      consumes:
      - application/json
      description: Login user by request.body json
      parameters:
      - default: session-token=
        description: session-token
        in: header
        name: Cookie
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.User'
        "400":
          description: 'Possible code responses: 3, 4, 5.'
          schema:
            $ref: '#/definitions/errs.ErrorResponse'
        "401":
          description: 'Possible code responses: 7, 8.'
          schema:
            $ref: '#/definitions/errs.ErrorResponse'
        "403":
          description: 'Possible code responses: 1.'
          schema:
            $ref: '#/definitions/errs.ErrorResponse'
        "500":
          description: 'Possible code responses: 11.'
          schema:
            $ref: '#/definitions/errs.ErrorResponse'
      summary: Login user
      tags:
      - Authorization
  /logout:
    get:
      description: Logout user by their session cookie
      parameters:
      - default: session-token=
        description: session-token
        in: header
        name: Cookie
        type: string
      responses:
        "200":
          description: OK
        "400":
          description: 'Possible code responses: 3.'
          schema:
            $ref: '#/definitions/errs.ErrorResponse'
      summary: Logout user
      tags:
      - Authorization
  /pins:
    get:
      description: Get pins by page
      parameters:
      - description: Page num from 0
        in: query
        name: page
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.FeedPins'
        "400":
          description: 'Possible code responses: 4.'
          schema:
            $ref: '#/definitions/errs.ErrorResponse'
        "500":
          description: 'Possible code responses: 11.'
          schema:
            $ref: '#/definitions/errs.ErrorResponse'
      summary: Pins list
      tags:
      - Pins
    post:
      consumes:
      - multipart/form-data
      description: Create pin by description
      parameters:
      - default: session-token=
        description: session-token
        in: header
        name: Cookie
        required: true
        type: string
      - description: Pin information in json
        in: formData
        name: pin
        type: string
      - description: Pin image
        in: formData
        name: image
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.PinPageResponse'
        "400":
          description: 'Possible code responses: 3, 4, 15, 18, 19.'
          schema:
            $ref: '#/definitions/errs.ErrorResponse'
        "401":
          description: 'Possible code responses: 2.'
          schema:
            $ref: '#/definitions/errs.ErrorResponse'
        "500":
          description: 'Possible code responses: 11.'
          schema:
            $ref: '#/definitions/errs.ErrorResponse'
      summary: Create pin
      tags:
      - Pins
  /pins/{pin_id}:
    delete:
      description: Delete pin by id (allowed only for pin's author)
      parameters:
      - default: session-token=
        description: session-token
        in: header
        name: Cookie
        required: true
        type: string
      - description: Pin ID
        in: path
        name: pin_id
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.PinPageResponse'
        "400":
          description: 'Possible code responses: 3, 4 12'
          schema:
            $ref: '#/definitions/errs.ErrorResponse'
        "401":
          description: 'Possible code responses: 2.'
          schema:
            $ref: '#/definitions/errs.ErrorResponse'
        "403":
          description: 'Possible code responses: 14.'
          schema:
            $ref: '#/definitions/errs.ErrorResponse'
        "500":
          description: 'Possible code responses: 11.'
          schema:
            $ref: '#/definitions/errs.ErrorResponse'
      summary: Delete pin
      tags:
      - Pins
    get:
      description: Get pin by id in the slug
      parameters:
      - description: Pin ID
        in: path
        name: pin_id
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.PinPageResponse'
        "400":
          description: 'Possible code responses: 4, 12.'
          schema:
            $ref: '#/definitions/errs.ErrorResponse'
        "500":
          description: 'Possible code responses: 11.'
          schema:
            $ref: '#/definitions/errs.ErrorResponse'
      summary: Get pin by id
      tags:
      - Pins
    post:
      consumes:
      - application/json
      description: Update pin by description
      parameters:
      - description: Pin information
        in: body
        name: pin
        required: true
        schema:
          $ref: '#/definitions/entity.Pin'
      - default: session-token=
        description: session-token
        in: header
        name: Cookie
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.PinPageResponse'
        "400":
          description: 'Possible code responses: 3, 4, 12'
          schema:
            $ref: '#/definitions/errs.ErrorResponse'
        "401":
          description: 'Possible code responses: 2.'
          schema:
            $ref: '#/definitions/errs.ErrorResponse'
        "403":
          description: 'Possible code responses: 14.'
          schema:
            $ref: '#/definitions/errs.ErrorResponse'
        "500":
          description: 'Possible code responses: 11.'
          schema:
            $ref: '#/definitions/errs.ErrorResponse'
      summary: Update pin
      tags:
      - Pins
  /pins/{pin_id}/like:
    delete:
      description: Delete like by pin id and auth token
      parameters:
      - default: session-token=
        description: session-token
        in: header
        name: Cookie
        required: true
        type: string
      - description: Pin ID
        in: path
        name: pin_id
        required: true
        type: integer
      responses:
        "200":
          description: OK
        "400":
          description: 'Possible code responses: 3, 12.'
          schema:
            $ref: '#/definitions/errs.ErrorResponse'
        "401":
          description: 'Possible code responses: 2.'
          schema:
            $ref: '#/definitions/errs.ErrorResponse'
        "500":
          description: 'Possible code responses: 11.'
          schema:
            $ref: '#/definitions/errs.ErrorResponse'
      summary: Delete like on the pin
      tags:
      - Likes
    post:
      description: Sets like by pin id and auth token
      parameters:
      - default: session-token=
        description: session-token
        in: header
        name: Cookie
        required: true
        type: string
      - description: Pin ID
        in: path
        name: pin_id
        required: true
        type: integer
      responses:
        "200":
          description: OK
        "400":
          description: 'Possible code responses: 3, 12.'
          schema:
            $ref: '#/definitions/errs.ErrorResponse'
        "401":
          description: 'Possible code responses: 2.'
          schema:
            $ref: '#/definitions/errs.ErrorResponse'
        "500":
          description: 'Possible code responses: 11.'
          schema:
            $ref: '#/definitions/errs.ErrorResponse'
      summary: Set like on the pin
      tags:
      - Likes
  /pins/created/{nickname}:
    get:
      description: Get pins of user by page
      parameters:
      - description: Page num from 0
        in: query
        name: page
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.FeedPins'
        "400":
          description: 'Possible code responses: 4, 12.'
          schema:
            $ref: '#/definitions/errs.ErrorResponse'
        "500":
          description: 'Possible code responses: 11.'
          schema:
            $ref: '#/definitions/errs.ErrorResponse'
      summary: Get pins that created by user id
      tags:
      - Pins
  /users:
    post:
      consumes:
      - application/json
      description: Register user by POST request and add them to DB
      parameters:
      - description: json
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/entity.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.UserResponse'
        "400":
          description: 'Possible code responses: 3, 4, 5.'
          schema:
            $ref: '#/definitions/errs.ErrorResponse'
        "401":
          description: 'Possible code responses: 7, 8.'
          schema:
            $ref: '#/definitions/errs.ErrorResponse'
        "403":
          description: 'Possible code responses: 1.'
          schema:
            $ref: '#/definitions/errs.ErrorResponse'
        "500":
          description: 'Possible code responses: 11.'
          schema:
            $ref: '#/definitions/errs.ErrorResponse'
      summary: Register user
      tags:
      - Authorization
  /users/{nickname}/:
    get:
      consumes:
      - application/json
      description: Update user by description and user id.
      parameters:
      - default: session-token=
        description: session-token
        in: header
        name: Cookie
        required: true
        type: string
      - description: User nickname
        in: path
        name: nickname
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.UserProfileResponse'
        "400":
          description: 'Possible code responses: 3, 4, 5, 12, 13, 18'
          schema:
            $ref: '#/definitions/errs.ErrorResponse'
        "401":
          description: 'Possible code responses: 2.'
          schema:
            $ref: '#/definitions/errs.ErrorResponse'
        "403":
          description: 'Possible code responses: 14.'
          schema:
            $ref: '#/definitions/errs.ErrorResponse'
        "500":
          description: 'Possible code responses: 6, 11.'
          schema:
            $ref: '#/definitions/errs.ErrorResponse'
      summary: Update user
      tags:
      - Users
  /users/{user_id}:
    post:
      consumes:
      - multipart/form-data
      description: Update user by description and user id.
      parameters:
      - default: session-token=
        description: session-token
        in: header
        name: Cookie
        required: true
        type: string
      - description: User information in json
        in: formData
        name: user
        type: string
      - description: User avatar
        in: formData
        name: image
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.PinPageResponse'
        "400":
          description: 'Possible code responses: 3, 4, 5, 12, 13, 18'
          schema:
            $ref: '#/definitions/errs.ErrorResponse'
        "401":
          description: 'Possible code responses: 2.'
          schema:
            $ref: '#/definitions/errs.ErrorResponse'
        "403":
          description: 'Possible code responses: 14.'
          schema:
            $ref: '#/definitions/errs.ErrorResponse'
        "500":
          description: 'Possible code responses: 6, 11.'
          schema:
            $ref: '#/definitions/errs.ErrorResponse'
      summary: Update user
      tags:
      - Users
swagger: "2.0"
