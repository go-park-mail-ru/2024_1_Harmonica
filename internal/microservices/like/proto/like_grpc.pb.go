// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: internal/microservices/like/proto/like.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LikeClient is the client API for Like service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LikeClient interface {
	SetLike(ctx context.Context, in *MakeLikeRequest, opts ...grpc.CallOption) (*MakeLikeResponse, error)
	ClearLike(ctx context.Context, in *MakeLikeRequest, opts ...grpc.CallOption) (*MakeLikeResponse, error)
	GetUsersLiked(ctx context.Context, in *GetUsersLikedRequest, opts ...grpc.CallOption) (*GetUsersLikedResponse, error)
	CheckIsLiked(ctx context.Context, in *CheckIsLikedRequest, opts ...grpc.CallOption) (*CheckIsLikedResponse, error)
	GetFavorites(ctx context.Context, in *GetFavoritesRequest, opts ...grpc.CallOption) (*GetFavoritesResponse, error)
}

type likeClient struct {
	cc grpc.ClientConnInterface
}

func NewLikeClient(cc grpc.ClientConnInterface) LikeClient {
	return &likeClient{cc}
}

func (c *likeClient) SetLike(ctx context.Context, in *MakeLikeRequest, opts ...grpc.CallOption) (*MakeLikeResponse, error) {
	out := new(MakeLikeResponse)
	err := c.cc.Invoke(ctx, "/like.Like/SetLike", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *likeClient) ClearLike(ctx context.Context, in *MakeLikeRequest, opts ...grpc.CallOption) (*MakeLikeResponse, error) {
	out := new(MakeLikeResponse)
	err := c.cc.Invoke(ctx, "/like.Like/ClearLike", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *likeClient) GetUsersLiked(ctx context.Context, in *GetUsersLikedRequest, opts ...grpc.CallOption) (*GetUsersLikedResponse, error) {
	out := new(GetUsersLikedResponse)
	err := c.cc.Invoke(ctx, "/like.Like/GetUsersLiked", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *likeClient) CheckIsLiked(ctx context.Context, in *CheckIsLikedRequest, opts ...grpc.CallOption) (*CheckIsLikedResponse, error) {
	out := new(CheckIsLikedResponse)
	err := c.cc.Invoke(ctx, "/like.Like/CheckIsLiked", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *likeClient) GetFavorites(ctx context.Context, in *GetFavoritesRequest, opts ...grpc.CallOption) (*GetFavoritesResponse, error) {
	out := new(GetFavoritesResponse)
	err := c.cc.Invoke(ctx, "/like.Like/GetFavorites", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LikeServer is the server API for Like service.
// All implementations must embed UnimplementedLikeServer
// for forward compatibility
type LikeServer interface {
	SetLike(context.Context, *MakeLikeRequest) (*MakeLikeResponse, error)
	ClearLike(context.Context, *MakeLikeRequest) (*MakeLikeResponse, error)
	GetUsersLiked(context.Context, *GetUsersLikedRequest) (*GetUsersLikedResponse, error)
	CheckIsLiked(context.Context, *CheckIsLikedRequest) (*CheckIsLikedResponse, error)
	GetFavorites(context.Context, *GetFavoritesRequest) (*GetFavoritesResponse, error)
	mustEmbedUnimplementedLikeServer()
}

// UnimplementedLikeServer must be embedded to have forward compatible implementations.
type UnimplementedLikeServer struct {
}

func (UnimplementedLikeServer) SetLike(context.Context, *MakeLikeRequest) (*MakeLikeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetLike not implemented")
}
func (UnimplementedLikeServer) ClearLike(context.Context, *MakeLikeRequest) (*MakeLikeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClearLike not implemented")
}
func (UnimplementedLikeServer) GetUsersLiked(context.Context, *GetUsersLikedRequest) (*GetUsersLikedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsersLiked not implemented")
}
func (UnimplementedLikeServer) CheckIsLiked(context.Context, *CheckIsLikedRequest) (*CheckIsLikedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckIsLiked not implemented")
}
func (UnimplementedLikeServer) GetFavorites(context.Context, *GetFavoritesRequest) (*GetFavoritesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFavorites not implemented")
}
func (UnimplementedLikeServer) mustEmbedUnimplementedLikeServer() {}

// UnsafeLikeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LikeServer will
// result in compilation errors.
type UnsafeLikeServer interface {
	mustEmbedUnimplementedLikeServer()
}

func RegisterLikeServer(s grpc.ServiceRegistrar, srv LikeServer) {
	s.RegisterService(&Like_ServiceDesc, srv)
}

func _Like_SetLike_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MakeLikeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LikeServer).SetLike(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/like.Like/SetLike",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LikeServer).SetLike(ctx, req.(*MakeLikeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Like_ClearLike_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MakeLikeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LikeServer).ClearLike(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/like.Like/ClearLike",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LikeServer).ClearLike(ctx, req.(*MakeLikeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Like_GetUsersLiked_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUsersLikedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LikeServer).GetUsersLiked(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/like.Like/GetUsersLiked",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LikeServer).GetUsersLiked(ctx, req.(*GetUsersLikedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Like_CheckIsLiked_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckIsLikedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LikeServer).CheckIsLiked(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/like.Like/CheckIsLiked",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LikeServer).CheckIsLiked(ctx, req.(*CheckIsLikedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Like_GetFavorites_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFavoritesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LikeServer).GetFavorites(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/like.Like/GetFavorites",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LikeServer).GetFavorites(ctx, req.(*GetFavoritesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Like_ServiceDesc is the grpc.ServiceDesc for Like service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Like_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "like.Like",
	HandlerType: (*LikeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetLike",
			Handler:    _Like_SetLike_Handler,
		},
		{
			MethodName: "ClearLike",
			Handler:    _Like_ClearLike_Handler,
		},
		{
			MethodName: "GetUsersLiked",
			Handler:    _Like_GetUsersLiked_Handler,
		},
		{
			MethodName: "CheckIsLiked",
			Handler:    _Like_CheckIsLiked_Handler,
		},
		{
			MethodName: "GetFavorites",
			Handler:    _Like_GetFavorites_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/microservices/like/proto/like.proto",
}
