// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import (
	models "harmonica/models"

	mock "github.com/stretchr/testify/mock"
)

// Pins is an autogenerated mock type for the Pins type
type Pins struct {
	mock.Mock
}

// GetPins provides a mock function with given fields: limit, offset
func (_m *Pins) GetPins(limit int, offset int) (models.Pins, error) {
	ret := _m.Called(limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for GetPins")
	}

	var r0 models.Pins
	var r1 error
	if rf, ok := ret.Get(0).(func(int, int) (models.Pins, error)); ok {
		return rf(limit, offset)
	}
	if rf, ok := ret.Get(0).(func(int, int) models.Pins); ok {
		r0 = rf(limit, offset)
	} else {
		r0 = ret.Get(0).(models.Pins)
	}

	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewPins creates a new instance of Pins. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPins(t interface {
	mock.TestingT
	Cleanup(func())
}) *Pins {
	mock := &Pins{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
