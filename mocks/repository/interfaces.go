// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repository/interfaces.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	entity "harmonica/internal/entity"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIRepository is a mock of IRepository interface.
type MockIRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIRepositoryMockRecorder
}

// MockIRepositoryMockRecorder is the mock recorder for MockIRepository.
type MockIRepositoryMockRecorder struct {
	mock *MockIRepository
}

// NewMockIRepository creates a new mock instance.
func NewMockIRepository(ctrl *gomock.Controller) *MockIRepository {
	mock := &MockIRepository{ctrl: ctrl}
	mock.recorder = &MockIRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIRepository) EXPECT() *MockIRepositoryMockRecorder {
	return m.recorder
}

// AddPinToBoard mocks base method.
func (m *MockIRepository) AddPinToBoard(ctx context.Context, boardId entity.BoardID, pinId entity.PinID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddPinToBoard", ctx, boardId, pinId)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddPinToBoard indicates an expected call of AddPinToBoard.
func (mr *MockIRepositoryMockRecorder) AddPinToBoard(ctx, boardId, pinId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPinToBoard", reflect.TypeOf((*MockIRepository)(nil).AddPinToBoard), ctx, boardId, pinId)
}

// AddSubscriptionToUser mocks base method.
func (m *MockIRepository) AddSubscriptionToUser(ctx context.Context, userId, subscribeUserId entity.UserID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddSubscriptionToUser", ctx, userId, subscribeUserId)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddSubscriptionToUser indicates an expected call of AddSubscriptionToUser.
func (mr *MockIRepositoryMockRecorder) AddSubscriptionToUser(ctx, userId, subscribeUserId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSubscriptionToUser", reflect.TypeOf((*MockIRepository)(nil).AddSubscriptionToUser), ctx, userId, subscribeUserId)
}

// CheckBoardAuthorExistence mocks base method.
func (m *MockIRepository) CheckBoardAuthorExistence(ctx context.Context, userId entity.UserID, boardId entity.BoardID) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckBoardAuthorExistence", ctx, userId, boardId)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckBoardAuthorExistence indicates an expected call of CheckBoardAuthorExistence.
func (mr *MockIRepositoryMockRecorder) CheckBoardAuthorExistence(ctx, userId, boardId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckBoardAuthorExistence", reflect.TypeOf((*MockIRepository)(nil).CheckBoardAuthorExistence), ctx, userId, boardId)
}

// CheckPinExistence mocks base method.
func (m *MockIRepository) CheckPinExistence(ctx context.Context, id entity.PinID) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckPinExistence", ctx, id)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckPinExistence indicates an expected call of CheckPinExistence.
func (mr *MockIRepositoryMockRecorder) CheckPinExistence(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckPinExistence", reflect.TypeOf((*MockIRepository)(nil).CheckPinExistence), ctx, id)
}

// CreateBoard mocks base method.
func (m *MockIRepository) CreateBoard(ctx context.Context, board entity.Board, userId entity.UserID) (entity.Board, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBoard", ctx, board, userId)
	ret0, _ := ret[0].(entity.Board)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBoard indicates an expected call of CreateBoard.
func (mr *MockIRepositoryMockRecorder) CreateBoard(ctx, board, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBoard", reflect.TypeOf((*MockIRepository)(nil).CreateBoard), ctx, board, userId)
}

// CreateMessage mocks base method.
func (m *MockIRepository) CreateMessage(ctx context.Context, message entity.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMessage", ctx, message)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateMessage indicates an expected call of CreateMessage.
func (mr *MockIRepositoryMockRecorder) CreateMessage(ctx, message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMessage", reflect.TypeOf((*MockIRepository)(nil).CreateMessage), ctx, message)
}

// CreatePin mocks base method.
func (m *MockIRepository) CreatePin(ctx context.Context, pin entity.Pin) (entity.PinID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePin", ctx, pin)
	ret0, _ := ret[0].(entity.PinID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePin indicates an expected call of CreatePin.
func (mr *MockIRepositoryMockRecorder) CreatePin(ctx, pin interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePin", reflect.TypeOf((*MockIRepository)(nil).CreatePin), ctx, pin)
}

// DeleteBoard mocks base method.
func (m *MockIRepository) DeleteBoard(ctx context.Context, boardId entity.BoardID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBoard", ctx, boardId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBoard indicates an expected call of DeleteBoard.
func (mr *MockIRepositoryMockRecorder) DeleteBoard(ctx, boardId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBoard", reflect.TypeOf((*MockIRepository)(nil).DeleteBoard), ctx, boardId)
}

// DeletePin mocks base method.
func (m *MockIRepository) DeletePin(ctx context.Context, id entity.PinID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePin", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePin indicates an expected call of DeletePin.
func (mr *MockIRepositoryMockRecorder) DeletePin(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePin", reflect.TypeOf((*MockIRepository)(nil).DeletePin), ctx, id)
}

// DeletePinFromBoard mocks base method.
func (m *MockIRepository) DeletePinFromBoard(ctx context.Context, boardId entity.BoardID, pinId entity.PinID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePinFromBoard", ctx, boardId, pinId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePinFromBoard indicates an expected call of DeletePinFromBoard.
func (mr *MockIRepositoryMockRecorder) DeletePinFromBoard(ctx, boardId, pinId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePinFromBoard", reflect.TypeOf((*MockIRepository)(nil).DeletePinFromBoard), ctx, boardId, pinId)
}

// DeleteSubscriptionToUser mocks base method.
func (m *MockIRepository) DeleteSubscriptionToUser(ctx context.Context, userId, unsubscribeUserId entity.UserID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSubscriptionToUser", ctx, userId, unsubscribeUserId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSubscriptionToUser indicates an expected call of DeleteSubscriptionToUser.
func (mr *MockIRepositoryMockRecorder) DeleteSubscriptionToUser(ctx, userId, unsubscribeUserId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSubscriptionToUser", reflect.TypeOf((*MockIRepository)(nil).DeleteSubscriptionToUser), ctx, userId, unsubscribeUserId)
}

// GetBoardAuthors mocks base method.
func (m *MockIRepository) GetBoardAuthors(ctx context.Context, boardId entity.BoardID) ([]entity.BoardAuthor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBoardAuthors", ctx, boardId)
	ret0, _ := ret[0].([]entity.BoardAuthor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBoardAuthors indicates an expected call of GetBoardAuthors.
func (mr *MockIRepositoryMockRecorder) GetBoardAuthors(ctx, boardId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBoardAuthors", reflect.TypeOf((*MockIRepository)(nil).GetBoardAuthors), ctx, boardId)
}

// GetBoardById mocks base method.
func (m *MockIRepository) GetBoardById(ctx context.Context, boardId entity.BoardID) (entity.Board, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBoardById", ctx, boardId)
	ret0, _ := ret[0].(entity.Board)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBoardById indicates an expected call of GetBoardById.
func (mr *MockIRepositoryMockRecorder) GetBoardById(ctx, boardId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBoardById", reflect.TypeOf((*MockIRepository)(nil).GetBoardById), ctx, boardId)
}

// GetBoardPins mocks base method.
func (m *MockIRepository) GetBoardPins(ctx context.Context, boardId entity.BoardID, limit, offset int) ([]entity.BoardPinResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBoardPins", ctx, boardId, limit, offset)
	ret0, _ := ret[0].([]entity.BoardPinResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBoardPins indicates an expected call of GetBoardPins.
func (mr *MockIRepositoryMockRecorder) GetBoardPins(ctx, boardId, limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBoardPins", reflect.TypeOf((*MockIRepository)(nil).GetBoardPins), ctx, boardId, limit, offset)
}

// GetFeedPins mocks base method.
func (m *MockIRepository) GetFeedPins(ctx context.Context, limit, offset int) (entity.FeedPins, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFeedPins", ctx, limit, offset)
	ret0, _ := ret[0].(entity.FeedPins)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFeedPins indicates an expected call of GetFeedPins.
func (mr *MockIRepositoryMockRecorder) GetFeedPins(ctx, limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFeedPins", reflect.TypeOf((*MockIRepository)(nil).GetFeedPins), ctx, limit, offset)
}

// GetMessages mocks base method.
func (m *MockIRepository) GetMessages(ctx context.Context, firstUserId, secondUserId entity.UserID) (entity.Messages, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMessages", ctx, firstUserId, secondUserId)
	ret0, _ := ret[0].(entity.Messages)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMessages indicates an expected call of GetMessages.
func (mr *MockIRepositoryMockRecorder) GetMessages(ctx, firstUserId, secondUserId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessages", reflect.TypeOf((*MockIRepository)(nil).GetMessages), ctx, firstUserId, secondUserId)
}

// GetPinById mocks base method.
func (m *MockIRepository) GetPinById(ctx context.Context, PinId entity.PinID) (entity.PinPageResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPinById", ctx, PinId)
	ret0, _ := ret[0].(entity.PinPageResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPinById indicates an expected call of GetPinById.
func (mr *MockIRepositoryMockRecorder) GetPinById(ctx, PinId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPinById", reflect.TypeOf((*MockIRepository)(nil).GetPinById), ctx, PinId)
}

// GetSubscriptionsFeedPins mocks base method.
func (m *MockIRepository) GetSubscriptionsFeedPins(ctx context.Context, userId entity.UserID, limit, offset int) (entity.FeedPins, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubscriptionsFeedPins", ctx, userId, limit, offset)
	ret0, _ := ret[0].(entity.FeedPins)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubscriptionsFeedPins indicates an expected call of GetSubscriptionsFeedPins.
func (mr *MockIRepositoryMockRecorder) GetSubscriptionsFeedPins(ctx, userId, limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubscriptionsFeedPins", reflect.TypeOf((*MockIRepository)(nil).GetSubscriptionsFeedPins), ctx, userId, limit, offset)
}

// GetSubscriptionsInfo mocks base method.
func (m *MockIRepository) GetSubscriptionsInfo(ctx context.Context, userToGetInfoId, userId entity.UserID) (entity.UserProfileResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubscriptionsInfo", ctx, userToGetInfoId, userId)
	ret0, _ := ret[0].(entity.UserProfileResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubscriptionsInfo indicates an expected call of GetSubscriptionsInfo.
func (mr *MockIRepositoryMockRecorder) GetSubscriptionsInfo(ctx, userToGetInfoId, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubscriptionsInfo", reflect.TypeOf((*MockIRepository)(nil).GetSubscriptionsInfo), ctx, userToGetInfoId, userId)
}

// GetUserBoards mocks base method.
func (m *MockIRepository) GetUserBoards(ctx context.Context, authorId, userId entity.UserID, limit, offset int) (entity.UserBoards, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserBoards", ctx, authorId, userId, limit, offset)
	ret0, _ := ret[0].(entity.UserBoards)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserBoards indicates an expected call of GetUserBoards.
func (mr *MockIRepositoryMockRecorder) GetUserBoards(ctx, authorId, userId, limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserBoards", reflect.TypeOf((*MockIRepository)(nil).GetUserBoards), ctx, authorId, userId, limit, offset)
}

// GetUserByEmail mocks base method.
func (m *MockIRepository) GetUserByEmail(ctx context.Context, email string) (entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmail", ctx, email)
	ret0, _ := ret[0].(entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmail indicates an expected call of GetUserByEmail.
func (mr *MockIRepositoryMockRecorder) GetUserByEmail(ctx, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*MockIRepository)(nil).GetUserByEmail), ctx, email)
}

// GetUserById mocks base method.
func (m *MockIRepository) GetUserById(ctx context.Context, id entity.UserID) (entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserById", ctx, id)
	ret0, _ := ret[0].(entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserById indicates an expected call of GetUserById.
func (mr *MockIRepositoryMockRecorder) GetUserById(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserById", reflect.TypeOf((*MockIRepository)(nil).GetUserById), ctx, id)
}

// GetUserByNickname mocks base method.
func (m *MockIRepository) GetUserByNickname(ctx context.Context, nickname string) (entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByNickname", ctx, nickname)
	ret0, _ := ret[0].(entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByNickname indicates an expected call of GetUserByNickname.
func (mr *MockIRepositoryMockRecorder) GetUserByNickname(ctx, nickname interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByNickname", reflect.TypeOf((*MockIRepository)(nil).GetUserByNickname), ctx, nickname)
}

// GetUserChats mocks base method.
func (m *MockIRepository) GetUserChats(ctx context.Context, userId entity.UserID) (entity.UserChats, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserChats", ctx, userId)
	ret0, _ := ret[0].(entity.UserChats)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserChats indicates an expected call of GetUserChats.
func (mr *MockIRepositoryMockRecorder) GetUserChats(ctx, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserChats", reflect.TypeOf((*MockIRepository)(nil).GetUserChats), ctx, userId)
}

// GetUserPins mocks base method.
func (m *MockIRepository) GetUserPins(ctx context.Context, authorId entity.UserID, limit, offset int) (entity.UserPins, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserPins", ctx, authorId, limit, offset)
	ret0, _ := ret[0].(entity.UserPins)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserPins indicates an expected call of GetUserPins.
func (mr *MockIRepositoryMockRecorder) GetUserPins(ctx, authorId, limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserPins", reflect.TypeOf((*MockIRepository)(nil).GetUserPins), ctx, authorId, limit, offset)
}

// GetUserSubscribers mocks base method.
func (m *MockIRepository) GetUserSubscribers(ctx context.Context, userId entity.UserID) (entity.UserSubscribers, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserSubscribers", ctx, userId)
	ret0, _ := ret[0].(entity.UserSubscribers)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserSubscribers indicates an expected call of GetUserSubscribers.
func (mr *MockIRepositoryMockRecorder) GetUserSubscribers(ctx, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserSubscribers", reflect.TypeOf((*MockIRepository)(nil).GetUserSubscribers), ctx, userId)
}

// GetUserSubscriptions mocks base method.
func (m *MockIRepository) GetUserSubscriptions(ctx context.Context, userId entity.UserID) (entity.UserSubscriptions, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserSubscriptions", ctx, userId)
	ret0, _ := ret[0].(entity.UserSubscriptions)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserSubscriptions indicates an expected call of GetUserSubscriptions.
func (mr *MockIRepositoryMockRecorder) GetUserSubscriptions(ctx, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserSubscriptions", reflect.TypeOf((*MockIRepository)(nil).GetUserSubscriptions), ctx, userId)
}

// RegisterUser mocks base method.
func (m *MockIRepository) RegisterUser(ctx context.Context, user entity.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterUser", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterUser indicates an expected call of RegisterUser.
func (mr *MockIRepositoryMockRecorder) RegisterUser(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterUser", reflect.TypeOf((*MockIRepository)(nil).RegisterUser), ctx, user)
}

// SearchForBoards mocks base method.
func (m *MockIRepository) SearchForBoards(ctx context.Context, query string) ([]entity.SearchBoard, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchForBoards", ctx, query)
	ret0, _ := ret[0].([]entity.SearchBoard)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchForBoards indicates an expected call of SearchForBoards.
func (mr *MockIRepositoryMockRecorder) SearchForBoards(ctx, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchForBoards", reflect.TypeOf((*MockIRepository)(nil).SearchForBoards), ctx, query)
}

// SearchForPins mocks base method.
func (m *MockIRepository) SearchForPins(ctx context.Context, query string) ([]entity.SearchPin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchForPins", ctx, query)
	ret0, _ := ret[0].([]entity.SearchPin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchForPins indicates an expected call of SearchForPins.
func (mr *MockIRepositoryMockRecorder) SearchForPins(ctx, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchForPins", reflect.TypeOf((*MockIRepository)(nil).SearchForPins), ctx, query)
}

// SearchForUsers mocks base method.
func (m *MockIRepository) SearchForUsers(ctx context.Context, query string) ([]entity.SearchUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchForUsers", ctx, query)
	ret0, _ := ret[0].([]entity.SearchUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchForUsers indicates an expected call of SearchForUsers.
func (mr *MockIRepositoryMockRecorder) SearchForUsers(ctx, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchForUsers", reflect.TypeOf((*MockIRepository)(nil).SearchForUsers), ctx, query)
}

// UpdateBoard mocks base method.
func (m *MockIRepository) UpdateBoard(ctx context.Context, board entity.Board) (entity.Board, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBoard", ctx, board)
	ret0, _ := ret[0].(entity.Board)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateBoard indicates an expected call of UpdateBoard.
func (mr *MockIRepositoryMockRecorder) UpdateBoard(ctx, board interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBoard", reflect.TypeOf((*MockIRepository)(nil).UpdateBoard), ctx, board)
}

// UpdatePin mocks base method.
func (m *MockIRepository) UpdatePin(ctx context.Context, pin entity.Pin) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePin", ctx, pin)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePin indicates an expected call of UpdatePin.
func (mr *MockIRepositoryMockRecorder) UpdatePin(ctx, pin interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePin", reflect.TypeOf((*MockIRepository)(nil).UpdatePin), ctx, pin)
}

// UpdateUser mocks base method.
func (m *MockIRepository) UpdateUser(ctx context.Context, user entity.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockIRepositoryMockRecorder) UpdateUser(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockIRepository)(nil).UpdateUser), ctx, user)
}
