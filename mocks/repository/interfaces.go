// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repository/interfaces.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	entity "harmonica/internal/entity"
	multipart "mime/multipart"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	minio "github.com/minio/minio-go/v7"
)

// MockIRepository is a mock of IRepository interface.
type MockIRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIRepositoryMockRecorder
}

// MockIRepositoryMockRecorder is the mock recorder for MockIRepository.
type MockIRepositoryMockRecorder struct {
	mock *MockIRepository
}

// NewMockIRepository creates a new mock instance.
func NewMockIRepository(ctrl *gomock.Controller) *MockIRepository {
	mock := &MockIRepository{ctrl: ctrl}
	mock.recorder = &MockIRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIRepository) EXPECT() *MockIRepositoryMockRecorder {
	return m.recorder
}

// AddPinToBoard mocks base method.
func (m *MockIRepository) AddPinToBoard(ctx context.Context, boardId entity.BoardID, pinId entity.PinID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddPinToBoard", ctx, boardId, pinId)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddPinToBoard indicates an expected call of AddPinToBoard.
func (mr *MockIRepositoryMockRecorder) AddPinToBoard(ctx, boardId, pinId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPinToBoard", reflect.TypeOf((*MockIRepository)(nil).AddPinToBoard), ctx, boardId, pinId)
}

// CheckBoardAuthorExistence mocks base method.
func (m *MockIRepository) CheckBoardAuthorExistence(ctx context.Context, userId entity.UserID, boardId entity.BoardID) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckBoardAuthorExistence", ctx, userId, boardId)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckBoardAuthorExistence indicates an expected call of CheckBoardAuthorExistence.
func (mr *MockIRepositoryMockRecorder) CheckBoardAuthorExistence(ctx, userId, boardId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckBoardAuthorExistence", reflect.TypeOf((*MockIRepository)(nil).CheckBoardAuthorExistence), ctx, userId, boardId)
}

// CheckIsLiked mocks base method.
func (m *MockIRepository) CheckIsLiked(ctx context.Context, pinId entity.PinID, userId entity.UserID) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckIsLiked", ctx, pinId, userId)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckIsLiked indicates an expected call of CheckIsLiked.
func (mr *MockIRepositoryMockRecorder) CheckIsLiked(ctx, pinId, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckIsLiked", reflect.TypeOf((*MockIRepository)(nil).CheckIsLiked), ctx, pinId, userId)
}

// CheckPinExistence mocks base method.
func (m *MockIRepository) CheckPinExistence(ctx context.Context, id entity.PinID) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckPinExistence", ctx, id)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckPinExistence indicates an expected call of CheckPinExistence.
func (mr *MockIRepositoryMockRecorder) CheckPinExistence(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckPinExistence", reflect.TypeOf((*MockIRepository)(nil).CheckPinExistence), ctx, id)
}

// ClearLike mocks base method.
func (m *MockIRepository) ClearLike(ctx context.Context, pinId entity.PinID, userId entity.UserID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClearLike", ctx, pinId, userId)
	ret0, _ := ret[0].(error)
	return ret0
}

// ClearLike indicates an expected call of ClearLike.
func (mr *MockIRepositoryMockRecorder) ClearLike(ctx, pinId, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearLike", reflect.TypeOf((*MockIRepository)(nil).ClearLike), ctx, pinId, userId)
}

// CreateBoard mocks base method.
func (m *MockIRepository) CreateBoard(ctx context.Context, board entity.Board, userId entity.UserID) (entity.Board, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBoard", ctx, board, userId)
	ret0, _ := ret[0].(entity.Board)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBoard indicates an expected call of CreateBoard.
func (mr *MockIRepositoryMockRecorder) CreateBoard(ctx, board, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBoard", reflect.TypeOf((*MockIRepository)(nil).CreateBoard), ctx, board, userId)
}

// CreatePin mocks base method.
func (m *MockIRepository) CreatePin(ctx context.Context, pin entity.Pin) (entity.PinID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePin", ctx, pin)
	ret0, _ := ret[0].(entity.PinID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePin indicates an expected call of CreatePin.
func (mr *MockIRepositoryMockRecorder) CreatePin(ctx, pin interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePin", reflect.TypeOf((*MockIRepository)(nil).CreatePin), ctx, pin)
}

// DeleteBoard mocks base method.
func (m *MockIRepository) DeleteBoard(ctx context.Context, boardId entity.BoardID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBoard", ctx, boardId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBoard indicates an expected call of DeleteBoard.
func (mr *MockIRepositoryMockRecorder) DeleteBoard(ctx, boardId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBoard", reflect.TypeOf((*MockIRepository)(nil).DeleteBoard), ctx, boardId)
}

// DeletePin mocks base method.
func (m *MockIRepository) DeletePin(ctx context.Context, id entity.PinID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePin", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePin indicates an expected call of DeletePin.
func (mr *MockIRepositoryMockRecorder) DeletePin(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePin", reflect.TypeOf((*MockIRepository)(nil).DeletePin), ctx, id)
}

// DeletePinFromBoard mocks base method.
func (m *MockIRepository) DeletePinFromBoard(ctx context.Context, boardId entity.BoardID, pinId entity.PinID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePinFromBoard", ctx, boardId, pinId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePinFromBoard indicates an expected call of DeletePinFromBoard.
func (mr *MockIRepositoryMockRecorder) DeletePinFromBoard(ctx, boardId, pinId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePinFromBoard", reflect.TypeOf((*MockIRepository)(nil).DeletePinFromBoard), ctx, boardId, pinId)
}

// GetBoardAuthors mocks base method.
func (m *MockIRepository) GetBoardAuthors(ctx context.Context, boardId entity.BoardID) ([]entity.BoardAuthor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBoardAuthors", ctx, boardId)
	ret0, _ := ret[0].([]entity.BoardAuthor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBoardAuthors indicates an expected call of GetBoardAuthors.
func (mr *MockIRepositoryMockRecorder) GetBoardAuthors(ctx, boardId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBoardAuthors", reflect.TypeOf((*MockIRepository)(nil).GetBoardAuthors), ctx, boardId)
}

// GetBoardById mocks base method.
func (m *MockIRepository) GetBoardById(ctx context.Context, boardId entity.BoardID) (entity.Board, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBoardById", ctx, boardId)
	ret0, _ := ret[0].(entity.Board)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBoardById indicates an expected call of GetBoardById.
func (mr *MockIRepositoryMockRecorder) GetBoardById(ctx, boardId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBoardById", reflect.TypeOf((*MockIRepository)(nil).GetBoardById), ctx, boardId)
}

// GetBoardPins mocks base method.
func (m *MockIRepository) GetBoardPins(ctx context.Context, boardId entity.BoardID, limit, offset int) ([]entity.BoardPinResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBoardPins", ctx, boardId, limit, offset)
	ret0, _ := ret[0].([]entity.BoardPinResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBoardPins indicates an expected call of GetBoardPins.
func (mr *MockIRepositoryMockRecorder) GetBoardPins(ctx, boardId, limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBoardPins", reflect.TypeOf((*MockIRepository)(nil).GetBoardPins), ctx, boardId, limit, offset)
}

// GetFeedPins mocks base method.
func (m *MockIRepository) GetFeedPins(ctx context.Context, limit, offset int) (entity.FeedPins, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFeedPins", ctx, limit, offset)
	ret0, _ := ret[0].(entity.FeedPins)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFeedPins indicates an expected call of GetFeedPins.
func (mr *MockIRepositoryMockRecorder) GetFeedPins(ctx, limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFeedPins", reflect.TypeOf((*MockIRepository)(nil).GetFeedPins), ctx, limit, offset)
}

// GetImage mocks base method.
func (m *MockIRepository) GetImage(ctx context.Context, name string) (*minio.Object, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImage", ctx, name)
	ret0, _ := ret[0].(*minio.Object)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImage indicates an expected call of GetImage.
func (mr *MockIRepositoryMockRecorder) GetImage(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImage", reflect.TypeOf((*MockIRepository)(nil).GetImage), ctx, name)
}

// GetPinById mocks base method.
func (m *MockIRepository) GetPinById(ctx context.Context, PinId entity.PinID) (entity.PinPageResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPinById", ctx, PinId)
	ret0, _ := ret[0].(entity.PinPageResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPinById indicates an expected call of GetPinById.
func (mr *MockIRepositoryMockRecorder) GetPinById(ctx, PinId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPinById", reflect.TypeOf((*MockIRepository)(nil).GetPinById), ctx, PinId)
}

// GetUserBoards mocks base method.
func (m *MockIRepository) GetUserBoards(ctx context.Context, authorId entity.UserID, limit, offset int) (entity.UserBoards, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserBoards", ctx, authorId, limit, offset)
	ret0, _ := ret[0].(entity.UserBoards)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserBoards indicates an expected call of GetUserBoards.
func (mr *MockIRepositoryMockRecorder) GetUserBoards(ctx, authorId, limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserBoards", reflect.TypeOf((*MockIRepository)(nil).GetUserBoards), ctx, authorId, limit, offset)
}

// GetUserByEmail mocks base method.
func (m *MockIRepository) GetUserByEmail(ctx context.Context, email string) (entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmail", ctx, email)
	ret0, _ := ret[0].(entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmail indicates an expected call of GetUserByEmail.
func (mr *MockIRepositoryMockRecorder) GetUserByEmail(ctx, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*MockIRepository)(nil).GetUserByEmail), ctx, email)
}

// GetUserById mocks base method.
func (m *MockIRepository) GetUserById(ctx context.Context, id entity.UserID) (entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserById", ctx, id)
	ret0, _ := ret[0].(entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserById indicates an expected call of GetUserById.
func (mr *MockIRepositoryMockRecorder) GetUserById(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserById", reflect.TypeOf((*MockIRepository)(nil).GetUserById), ctx, id)
}

// GetUserByNickname mocks base method.
func (m *MockIRepository) GetUserByNickname(ctx context.Context, nickname string) (entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByNickname", ctx, nickname)
	ret0, _ := ret[0].(entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByNickname indicates an expected call of GetUserByNickname.
func (mr *MockIRepositoryMockRecorder) GetUserByNickname(ctx, nickname interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByNickname", reflect.TypeOf((*MockIRepository)(nil).GetUserByNickname), ctx, nickname)
}

// GetUserPins mocks base method.
func (m *MockIRepository) GetUserPins(ctx context.Context, authorId entity.UserID, limit, offset int) (entity.UserPins, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserPins", ctx, authorId, limit, offset)
	ret0, _ := ret[0].(entity.UserPins)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserPins indicates an expected call of GetUserPins.
func (mr *MockIRepositoryMockRecorder) GetUserPins(ctx, authorId, limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserPins", reflect.TypeOf((*MockIRepository)(nil).GetUserPins), ctx, authorId, limit, offset)
}

// GetUsersLiked mocks base method.
func (m *MockIRepository) GetUsersLiked(ctx context.Context, pinId entity.PinID, limit int) (entity.UserList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsersLiked", ctx, pinId, limit)
	ret0, _ := ret[0].(entity.UserList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsersLiked indicates an expected call of GetUsersLiked.
func (mr *MockIRepositoryMockRecorder) GetUsersLiked(ctx, pinId, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsersLiked", reflect.TypeOf((*MockIRepository)(nil).GetUsersLiked), ctx, pinId, limit)
}

// RegisterUser mocks base method.
func (m *MockIRepository) RegisterUser(ctx context.Context, user entity.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterUser", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterUser indicates an expected call of RegisterUser.
func (mr *MockIRepositoryMockRecorder) RegisterUser(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterUser", reflect.TypeOf((*MockIRepository)(nil).RegisterUser), ctx, user)
}

// SetLike mocks base method.
func (m *MockIRepository) SetLike(ctx context.Context, pinId entity.PinID, userId entity.UserID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetLike", ctx, pinId, userId)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetLike indicates an expected call of SetLike.
func (mr *MockIRepositoryMockRecorder) SetLike(ctx, pinId, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLike", reflect.TypeOf((*MockIRepository)(nil).SetLike), ctx, pinId, userId)
}

// UpdateBoard mocks base method.
func (m *MockIRepository) UpdateBoard(ctx context.Context, board entity.Board) (entity.Board, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBoard", ctx, board)
	ret0, _ := ret[0].(entity.Board)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateBoard indicates an expected call of UpdateBoard.
func (mr *MockIRepositoryMockRecorder) UpdateBoard(ctx, board interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBoard", reflect.TypeOf((*MockIRepository)(nil).UpdateBoard), ctx, board)
}

// UpdatePin mocks base method.
func (m *MockIRepository) UpdatePin(ctx context.Context, pin entity.Pin) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePin", ctx, pin)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePin indicates an expected call of UpdatePin.
func (mr *MockIRepositoryMockRecorder) UpdatePin(ctx, pin interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePin", reflect.TypeOf((*MockIRepository)(nil).UpdatePin), ctx, pin)
}

// UpdateUser mocks base method.
func (m *MockIRepository) UpdateUser(ctx context.Context, user entity.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockIRepositoryMockRecorder) UpdateUser(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockIRepository)(nil).UpdateUser), ctx, user)
}

// UploadImage mocks base method.
func (m *MockIRepository) UploadImage(ctx context.Context, file multipart.File, fileHeader *multipart.FileHeader) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadImage", ctx, file, fileHeader)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadImage indicates an expected call of UploadImage.
func (mr *MockIRepositoryMockRecorder) UploadImage(ctx, file, fileHeader interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadImage", reflect.TypeOf((*MockIRepository)(nil).UploadImage), ctx, file, fileHeader)
}
